input ConnectionInput {
  first: Int
  after: String
  last: Int
  before: String
}

input CreateGroupInput {
  name: String!
  userIds: [ID!]
}

input CreateMessageInput {
  groupId: ID!
  text: String!
}

scalar Date

type Group {
  id: ID!
  name: String
  users: [User]!
  messages(messageConnection: ConnectionInput): MessageConnection
}

type Message {
  id: ID!
  to: Group!
  from: User!
  text: String!
  createdAt: Date!
}

type MessageConnection {
  edges: [MessageEdge]
  pageInfo: PageInfo!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

type Mutation {
  createMessage(message: CreateMessageInput!): Message
  createGroup(group: CreateGroupInput): Group
  updateGroup(group: UpdateGroupInput): Group
  leaveGroup(id: ID!): Group
  deleteGroup(id: ID!): Group
  login(user: SigninUserInput): User
  signup(user: SigninUserInput): User
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  user(email: String, id: ID): User
  users: [User]
  messages(groupId: ID, userId: ID): [Message]
  group(id: ID!): Group
  groups: [Group]
}

input SigninUserInput {
  email: String!
  password: String!
  username: String
}

type Subscription {
  messageAdded(groupIds: [ID]): Message
  groupAdded: Group
}

input UpdateGroupInput {
  id: ID!
  name: String
  userIds: [ID]
}

input UpdateUserInput {
  username: String
}

type User {
  id: ID!
  email: String!
  username: String
  messages: [Message]
  groups: [Group]
  friends: [User]
  jwt: String
}
